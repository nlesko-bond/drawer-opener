name: Build & Release Drawer Opener

on:
  push:
    tags:
      - "v*"
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  build:
    name: "Build (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install deps
        run: npm ci

      # macOS: decode P12 from $P12_BASE64 into /tmp/cert.p12 and verify password
      - name: Prep signing cert (mac)
        if: matrix.os == 'macos-latest'
        shell: bash
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${P12_BASE64:-}" ]; then
            echo "P12_BASE64 secret is empty"; exit 1
          fi
          python3 - <<'PY'
          import base64, os
          b64 = os.environ['P12_BASE64'].strip()
          open('/tmp/cert.p12','wb').write(base64.b64decode(b64))
          PY
          /usr/bin/openssl pkcs12 -in /tmp/cert.p12 -nokeys -passin pass:"$CSC_KEY_PASSWORD" >/dev/null
          echo "CSC_LINK=/tmp/cert.p12" >> "$GITHUB_ENV"

      - name: Build (mac)
        if: matrix.os == 'macos-latest'
        env:
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          ELECTRON_BUILDER_SKIP_PUBLISH: "true"
          CSC_IDENTITY_AUTO_DISCOVERY: "true"
        run: npm run build

      - name: Staple (mac)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          set -e
          APP_PATH=$(echo dist/mac*/drawer-opener.app)
          echo "Stapling: $APP_PATH"
          xcrun stapler staple "$APP_PATH" || true
          DMG_PATH=$(ls dist/*.dmg 2>/dev/null | head -n1 || true)
          if [ -n "$DMG_PATH" ]; then
            echo "Stapling DMG: $DMG_PATH"
            xcrun stapler staple "$DMG_PATH" || true
          fi

      - name: Upload artifacts (mac)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macOS-artifacts
          path: |
            dist/*.dmg
            dist/*-mac.zip
            dist/mac*/drawer-opener.app
          if-no-files-found: warn

      - name: Build (windows)
        if: matrix.os == 'windows-latest'
        env:
          ELECTRON_BUILDER_SKIP_PUBLISH: "true"
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
        run: npm run build

      - name: Upload artifacts (windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.msi
          if-no-files-found: warn

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download macOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: macOS-artifacts
          path: dist-mac
        continue-on-error: true

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-artifacts
          path: dist-win
        continue-on-error: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist-mac/**
            dist-win/**
          generate_release_notes: true
